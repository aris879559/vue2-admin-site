{"ast":null,"code":"import { getUser, addUser, editUser, deleteUser } from '../api/';\nexport default {\n  data() {\n    return {\n      selectedDate: null,\n      pickerOptions: {\n        disabledDate(time) {\n          return time.getTime() > Date.now();\n        }\n      },\n      dialogVisible: false,\n      form: {\n        name: '',\n        age: '',\n        sex: '',\n        birth: '',\n        addr: ''\n      },\n      pickerOptions: {\n        disabledDate(time) {\n          return time.getTime() > Date.now();\n        }\n      },\n      rules: {\n        name: [{\n          required: true,\n          message: '请输入姓名'\n        }],\n        age: [{\n          required: true,\n          message: '请输入年龄'\n        }],\n        sex: [{\n          required: true,\n          message: '请选择性别'\n        }],\n        birth: [{\n          required: true,\n          message: '请选择出生日期'\n        }],\n        addr: [{\n          required: true,\n          message: '请输入地址'\n        }]\n      },\n      tableData: [],\n      modalType: 0,\n      // 0表示新增的弹窗，1表示编辑\n      total: 0,\n      // 当前的总条数\n      pageData: {\n        page: 1,\n        limit: 10\n      }\n    };\n  },\n  methods: {\n    // 提交用户表单\n    submit() {\n      this.$refs.form.validate(valid => {\n        // console.log(valid, 'valid')\n        // 符合校验\n        if (valid) {\n          // 表单验证通过，执行提交逻辑,后续对表单数据的处理\n          if (this.modalType === 0) {\n            addUser(this.form).then(() => {\n              // 重新获取列表的接口\n              this.getList();\n            });\n          } else {\n            editUser(this.form).then(() => {\n              // 重新获取列表的接口\n              this.getList();\n            });\n          }\n          console.log(this.form, 'form');\n\n          // 清空表单数据\n          this.$refs.form.resetFields();\n          // 关闭弹窗\n          this.dialogVisible = false;\n        }\n      });\n    },\n    // 弹窗关闭的时候，重置表单\n    handleClose() {\n      // console.log(this.$refs.form)\n      // 清空表单数据\n      this.$refs.form.resetFields();\n      // 关闭弹窗\n      this.dialogVisible = false;\n    },\n    // 点击按钮取消，重置表单\n    cancel() {\n      this.handleClose();\n    },\n    handleEdit(row) {\n      this.modalType = 1;\n      this.dialogVisible = true;\n      // 注意需要对当前数据进行深拷贝\n      // 深拷贝，避免修改form时，影响tableData的数据\n      this.form = JSON.parse(JSON.stringify(row));\n    },\n    handleDelete(row) {\n      this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        deleteUser({\n          id: row.id\n        }).then(() => {\n          this.$message({\n            type: 'success',\n            message: '删除成功!'\n          });\n          // 重新获取列表的接口\n          this.getList();\n        });\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消删除'\n        });\n      });\n    },\n    handleAdd() {\n      this.modalType = 0;\n      this.dialogVisible = true;\n    },\n    // 获取列表数据\n    getList() {\n      // 获取列表的数据,src\\api\\index.js定义了export const getUser = (params)\n      getUser({\n        params: this.pageData\n      }).then(({\n        data\n      }) => {\n        // console.log(data, 'data')\n        this.tableData = data.list;\n        // this.total = data.count ? data.count : 0 判断内容为不确定时使用三元判断\n        this.total = data.count || 0; //对数值进行判断处理\n      });\n    },\n    // 选择页码的回调函数\n    handlePage(val) {\n      // console.log(val, 'val')\n      this.pageData.page = val;\n      this.getList();\n    }\n  },\n  mounted() {\n    // // 获取列表的数据\n    // getUser().then(({ data }) => {\n    //   // console.log(data, 'data')\n    //   this.tableData = data.list\n    // })\n    this.getList();\n  }\n};","map":{"version":3,"names":["getUser","addUser","editUser","deleteUser","data","selectedDate","pickerOptions","disabledDate","time","getTime","Date","now","dialogVisible","form","name","age","sex","birth","addr","rules","required","message","tableData","modalType","total","pageData","page","limit","methods","submit","$refs","validate","valid","then","getList","console","log","resetFields","handleClose","cancel","handleEdit","row","JSON","parse","stringify","handleDelete","$confirm","confirmButtonText","cancelButtonText","type","id","$message","catch","handleAdd","params","list","count","handlePage","val","mounted"],"sources":["src/views/User.vue"],"sourcesContent":["<template>\r\n  <div class=\"manage\">\r\n    <el-dialog\r\n      title=\"提示\"\r\n      :visible.sync=\"dialogVisible\"\r\n      width=\"50%\"\r\n      :before-close=\"handleClose\">\r\n      <!-- 用户的表单信息 -->\r\n      <el-form ref=\"form\" :rules=\"rules\" :inline=\"true\" :model=\"form\" label-width=\"80px\">\r\n        <el-form-item label=\"姓名\" prop=\"name\">\r\n          <el-input placeholder=\"请输入姓名\" v-model=\"form.name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"年龄\" prop=\"age\">\r\n          <el-input placeholder=\"请输入年龄\" v-model=\"form.age\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"性别\" prop=\"sex\">\r\n          <el-select v-model=\"form.sex\" placeholder=\"请选择\">\r\n            <el-option label=\"男\" :value=\"1\"></el-option>\r\n            <el-option label=\"女\" :value=\"0\"></el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item label=\"出生日期\" prop=\"birth\">\r\n          <!-- 只能选择1号则检查日期格式问题 -->\r\n          <el-date-picker\r\n            v-model=\"form.birth\"\r\n            type=\"date\"\r\n            placeholder=\"选择日期\"\r\n            value-format=\"yyyy-MM-dd\"\r\n            :picker-options=\"pickerOptions\">\r\n          </el-date-picker>\r\n        </el-form-item>\r\n        <el-form-item label=\"地址\" prop=\"addr\">\r\n          <el-input placeholder=\"请输入地址\" v-model=\"form.addr\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"cancel\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"submit\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n    <div class=\"manage-header\">\r\n      <el-button @click=\"handleAdd\" type=\"primary\">\r\n        + 新增\r\n      </el-button>\r\n      <!-- form 搜索区域 -->\r\n    </div>\r\n    <div class=\"common-label\">\r\n      <el-table\r\n      stripe\r\n      height=\"90%\"\r\n        :data=\"tableData\"\r\n        style=\"width: 100%\">\r\n        <el-table-column\r\n          prop=\"name\"\r\n          label=\"姓名\">\r\n        </el-table-column>\r\n        <el-table-column\r\n          prop=\"sex\"\r\n          label=\"性別\">\r\n          <template slot-scope=\"scope\">\r\n            <!-- <i class=\"el-icon-time\"></i> -->\r\n            <span>{{ scope.row.sex == 1 ? '男' : '女' }}</span>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column\r\n          prop=\"age\"\r\n          label=\"年龄\">\r\n        </el-table-column>\r\n        <el-table-column\r\n          prop=\"birth\"\r\n          label=\"出生日期\">\r\n        </el-table-column>\r\n        <el-table-column\r\n          prop=\"addr\"\r\n          label=\"地址\">\r\n        </el-table-column>\r\n        <el-table-column\r\n          prop=\"addr\"\r\n          label=\"地址\">\r\n          <template slot-scope=\"scope\">\r\n            <el-button size=\"mini\" @click=\"handleEdit(scope.row)\">编辑</el-button>\r\n            <el-button type=\"danger\" size=\"mini\" @click=\"handleDelete(scope.row)\">删除</el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n      <div class=\"pager\">\r\n        <el-pagination\r\n          layout=\"prev, pager, next\"\r\n          :total=\"total\"\r\n          @current-change=\"handlePage\">\r\n        </el-pagination>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { getUser, addUser, editUser, deleteUser } from '../api/'\r\nexport default{\r\n  data() {\r\n    return {\r\n      selectedDate: null,\r\n      pickerOptions: {\r\n        disabledDate(time) {\r\n          return time.getTime() > Date.now();\r\n        },\r\n      },\r\n      dialogVisible: false,\r\n      form: {\r\n        name: '',\r\n        age: '',\r\n        sex: '',\r\n        birth: '',\r\n        addr: '',\r\n      },\r\n      pickerOptions: {\r\n        disabledDate(time) {\r\n          return time.getTime() > Date.now();\r\n        },\r\n      },\r\n      rules: {\r\n        name: [{ required: true, message: '请输入姓名' }],\r\n        age: [{ required: true, message: '请输入年龄' }],\r\n        sex: [{ required: true, message: '请选择性别' }],\r\n        birth: [{ required: true, message: '请选择出生日期' }],\r\n        addr: [{ required: true, message: '请输入地址' }],\r\n      },\r\n      tableData: [],\r\n      modalType: 0, // 0表示新增的弹窗，1表示编辑\r\n      total: 0, // 当前的总条数\r\n      pageData: {\r\n        page: 1,\r\n        limit: 10,\r\n      },\r\n    }\r\n  },\r\n  methods: {\r\n    // 提交用户表单\r\n    submit() {\r\n      this.$refs.form.validate((valid) => {\r\n        // console.log(valid, 'valid')\r\n        // 符合校验\r\n        if (valid) {\r\n          // 表单验证通过，执行提交逻辑,后续对表单数据的处理\r\n          if (this.modalType === 0) {\r\n            addUser(this.form).then(() => {\r\n              // 重新获取列表的接口\r\n              this.getList()\r\n            })\r\n          } else {\r\n            editUser(this.form).then(() => {\r\n              // 重新获取列表的接口\r\n              this.getList()\r\n            })\r\n          }\r\n          console.log(this.form, 'form')\r\n\r\n          // 清空表单数据\r\n          this.$refs.form.resetFields()\r\n          // 关闭弹窗\r\n          this.dialogVisible = false\r\n        }\r\n      })\r\n    },\r\n    // 弹窗关闭的时候，重置表单\r\n    handleClose() {\r\n      // console.log(this.$refs.form)\r\n      // 清空表单数据\r\n      this.$refs.form.resetFields()\r\n      // 关闭弹窗\r\n      this.dialogVisible = false\r\n    },\r\n    // 点击按钮取消，重置表单\r\n    cancel() {\r\n      this.handleClose()\r\n    },\r\n    handleEdit(row) {\r\n      this.modalType = 1\r\n      this.dialogVisible = true\r\n      // 注意需要对当前数据进行深拷贝\r\n      // 深拷贝，避免修改form时，影响tableData的数据\r\n      this.form = JSON.parse(JSON.stringify(row))\r\n    },\r\n    handleDelete(row) {\r\n      this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n        }).then(() => {\r\n          deleteUser({ id: row.id }).then(() => {\r\n            this.$message({\r\n              type: 'success',\r\n              message: '删除成功!'\r\n            });\r\n            // 重新获取列表的接口\r\n            this.getList()\r\n          }) \r\n        }).catch(() => {\r\n          this.$message({\r\n            type: 'info',\r\n            message: '已取消删除'\r\n        });          \r\n      });\r\n    },\r\n    handleAdd() {\r\n      this.modalType = 0\r\n      this.dialogVisible = true\r\n    },\r\n    // 获取列表数据\r\n    getList() {\r\n      // 获取列表的数据,src\\api\\index.js定义了export const getUser = (params)\r\n      getUser({ params: this.pageData }).then(({ data }) => {\r\n        // console.log(data, 'data')\r\n        this.tableData = data.list\r\n        // this.total = data.count ? data.count : 0 判断内容为不确定时使用三元判断\r\n        this.total = data.count || 0 //对数值进行判断处理\r\n      })\r\n    },\r\n    // 选择页码的回调函数\r\n    handlePage(val) {\r\n      // console.log(val, 'val')\r\n      this.pageData.page = val\r\n      this.getList()\r\n    }\r\n  },\r\n  mounted() {\r\n    // // 获取列表的数据\r\n    // getUser().then(({ data }) => {\r\n    //   // console.log(data, 'data')\r\n    //   this.tableData = data.list\r\n    // })\r\n    this.getList()\r\n  }\r\n}\r\n</script>\r\n<style lang=\"less\" scoped>\r\n.manage {\r\n  height: 90%;\r\n  .common-label {\r\n    position: relative;\r\n    height: calc(100% - 62px);\r\n    .pager {\r\n      position: absolute;\r\n      bottom: 0;\r\n      right: 20px;\r\n    }\r\n  }\r\n}\r\n</style>"],"mappings":"AAgGA,SAAAA,OAAA,EAAAC,OAAA,EAAAC,QAAA,EAAAC,UAAA;AACA;EACAC,KAAA;IACA;MACAC,YAAA;MACAC,aAAA;QACAC,aAAAC,IAAA;UACA,OAAAA,IAAA,CAAAC,OAAA,KAAAC,IAAA,CAAAC,GAAA;QACA;MACA;MACAC,aAAA;MACAC,IAAA;QACAC,IAAA;QACAC,GAAA;QACAC,GAAA;QACAC,KAAA;QACAC,IAAA;MACA;MACAZ,aAAA;QACAC,aAAAC,IAAA;UACA,OAAAA,IAAA,CAAAC,OAAA,KAAAC,IAAA,CAAAC,GAAA;QACA;MACA;MACAQ,KAAA;QACAL,IAAA;UAAAM,QAAA;UAAAC,OAAA;QAAA;QACAN,GAAA;UAAAK,QAAA;UAAAC,OAAA;QAAA;QACAL,GAAA;UAAAI,QAAA;UAAAC,OAAA;QAAA;QACAJ,KAAA;UAAAG,QAAA;UAAAC,OAAA;QAAA;QACAH,IAAA;UAAAE,QAAA;UAAAC,OAAA;QAAA;MACA;MACAC,SAAA;MACAC,SAAA;MAAA;MACAC,KAAA;MAAA;MACAC,QAAA;QACAC,IAAA;QACAC,KAAA;MACA;IACA;EACA;EACAC,OAAA;IACA;IACAC,OAAA;MACA,KAAAC,KAAA,CAAAjB,IAAA,CAAAkB,QAAA,CAAAC,KAAA;QACA;QACA;QACA,IAAAA,KAAA;UACA;UACA,SAAAT,SAAA;YACAtB,OAAA,MAAAY,IAAA,EAAAoB,IAAA;cACA;cACA,KAAAC,OAAA;YACA;UACA;YACAhC,QAAA,MAAAW,IAAA,EAAAoB,IAAA;cACA;cACA,KAAAC,OAAA;YACA;UACA;UACAC,OAAA,CAAAC,GAAA,MAAAvB,IAAA;;UAEA;UACA,KAAAiB,KAAA,CAAAjB,IAAA,CAAAwB,WAAA;UACA;UACA,KAAAzB,aAAA;QACA;MACA;IACA;IACA;IACA0B,YAAA;MACA;MACA;MACA,KAAAR,KAAA,CAAAjB,IAAA,CAAAwB,WAAA;MACA;MACA,KAAAzB,aAAA;IACA;IACA;IACA2B,OAAA;MACA,KAAAD,WAAA;IACA;IACAE,WAAAC,GAAA;MACA,KAAAlB,SAAA;MACA,KAAAX,aAAA;MACA;MACA;MACA,KAAAC,IAAA,GAAA6B,IAAA,CAAAC,KAAA,CAAAD,IAAA,CAAAE,SAAA,CAAAH,GAAA;IACA;IACAI,aAAAJ,GAAA;MACA,KAAAK,QAAA;QACAC,iBAAA;QACAC,gBAAA;QACAC,IAAA;MACA,GAAAhB,IAAA;QACA9B,UAAA;UAAA+C,EAAA,EAAAT,GAAA,CAAAS;QAAA,GAAAjB,IAAA;UACA,KAAAkB,QAAA;YACAF,IAAA;YACA5B,OAAA;UACA;UACA;UACA,KAAAa,OAAA;QACA;MACA,GAAAkB,KAAA;QACA,KAAAD,QAAA;UACAF,IAAA;UACA5B,OAAA;QACA;MACA;IACA;IACAgC,UAAA;MACA,KAAA9B,SAAA;MACA,KAAAX,aAAA;IACA;IACA;IACAsB,QAAA;MACA;MACAlC,OAAA;QAAAsD,MAAA,OAAA7B;MAAA,GAAAQ,IAAA;QAAA7B;MAAA;QACA;QACA,KAAAkB,SAAA,GAAAlB,IAAA,CAAAmD,IAAA;QACA;QACA,KAAA/B,KAAA,GAAApB,IAAA,CAAAoD,KAAA;MACA;IACA;IACA;IACAC,WAAAC,GAAA;MACA;MACA,KAAAjC,QAAA,CAAAC,IAAA,GAAAgC,GAAA;MACA,KAAAxB,OAAA;IACA;EACA;EACAyB,QAAA;IACA;IACA;IACA;IACA;IACA;IACA,KAAAzB,OAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}