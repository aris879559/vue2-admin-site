{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// mock数据模拟\nimport Mock from 'mockjs';\n\n// 图表数据\nlet List = [];\nexport default {\n  getStatisticsData: () => {\n    // mock.Random.float 产生随机数100到8000之间，保留小数最小0位 最大0位\n    for (let i = 0; i < 7; i++) {\n      List.push(Mock.mock({\n        苹果: Mock.Random.float(100, 8000, 0, 0),\n        vivo: Mock.Random.float(100, 8000, 0, 0),\n        oppo: Mock.Random.float(100, 8000, 0, 0),\n        魅族: Mock.Random.float(100, 8000, 0, 0),\n        三星: Mock.Random.float(100, 8000, 0, 0),\n        小米: Mock.Random.float(100, 8000, 0, 0)\n        // 华为: Mock.Random.float(100, 8000, 0, 0),\n      }));\n    }\n    return {\n      code: 20000,\n      data: {\n        //饼图\n        videoData: [{\n          name: '小米',\n          value: 2999\n        }, {\n          name: '苹果',\n          value: 5999\n        }, {\n          name: 'vivo',\n          value: 1500\n        }, {\n          name: '魅族',\n          value: 2200\n        }, {\n          name: '三星',\n          value: 4500\n        }],\n        //柱状图\n        userData: [{\n          date: '周一',\n          new: 5,\n          active: 200\n        }, {\n          date: '周二',\n          new: 10,\n          active: 500\n        }, {\n          date: '周三',\n          new: 12,\n          active: 550\n        }, {\n          date: '周四',\n          new: 60,\n          active: 800\n        }, {\n          date: '周五',\n          new: 65,\n          active: 550\n        }, {\n          date: '周六',\n          new: 53,\n          active: 770\n        }, {\n          date: '周日',\n          new: 33,\n          active: 170\n        }],\n        //折线图\n        orderData: {\n          date: ['20231001', '20231002', '20231003', '20231004', '20231005', '20231006', '20231007'],\n          data: List\n        },\n        tableData: [{\n          name: 'oppo',\n          todayBuy: 500,\n          monthBuy: 3500,\n          totalBuy: 22000\n        }, {\n          name: 'vivo',\n          todayBuy: 300,\n          monthBuy: 2200,\n          totalBuy: 24000\n        }, {\n          name: '苹果',\n          todayBuy: 800,\n          monthBuy: 4500,\n          totalBuy: 65000\n        }, {\n          name: '小米',\n          todayBuy: 1200,\n          monthBuy: 6500,\n          totalBuy: 45000\n        }, {\n          name: '三星',\n          todayBuy: 300,\n          monthBuy: 2000,\n          totalBuy: 34000\n        }, {\n          name: '魅族',\n          todayBuy: 350,\n          monthBuy: 3000,\n          totalBuy: 22000\n        }\n        // {\n        //   name: '华为',\n        //   todayBuy: 1000,\n        //   monthBuy: 6000,\n        //   totalBuy: 40000\n        // },\n        ]\n      }\n    };\n  }\n};","map":{"version":3,"names":["Mock","List","getStatisticsData","i","push","mock","苹果","Random","float","vivo","oppo","魅族","三星","小米","code","data","videoData","name","value","userData","date","new","active","orderData","tableData","todayBuy","monthBuy","totalBuy"],"sources":["D:/git/vue2-admin-site/src/api/mockServeData/home.js"],"sourcesContent":["// mock数据模拟\r\nimport Mock from 'mockjs'\r\n\r\n// 图表数据\r\nlet List = []\r\nexport default {\r\n  getStatisticsData: () => {\r\n    // mock.Random.float 产生随机数100到8000之间，保留小数最小0位 最大0位\r\n    for (let i = 0; i < 7; i++) {\r\n      List.push(\r\n        Mock.mock({\r\n          苹果: Mock.Random.float(100, 8000, 0, 0),\r\n          vivo: Mock.Random.float(100, 8000, 0, 0),\r\n          oppo: Mock.Random.float(100, 8000, 0, 0),\r\n          魅族: Mock.Random.float(100, 8000, 0, 0),\r\n          三星: Mock.Random.float(100, 8000, 0, 0),\r\n          小米: Mock.Random.float(100, 8000, 0, 0),\r\n          // 华为: Mock.Random.float(100, 8000, 0, 0),\r\n        })\r\n      )\r\n    }\r\n    return {\r\n      code: 20000,\r\n      data: {\r\n        //饼图\r\n        videoData: [\r\n          {\r\n            name: '小米',\r\n            value: 2999\r\n          },\r\n          {\r\n            name: '苹果',\r\n            value: 5999\r\n          },\r\n          {\r\n            name: 'vivo',\r\n            value: 1500\r\n          },\r\n          {\r\n            name: '魅族',\r\n            value: 2200\r\n          },\r\n          {\r\n            name: '三星',\r\n            value: 4500\r\n          },\r\n        ],\r\n        //柱状图\r\n        userData: [\r\n          {\r\n            date: '周一',\r\n            new: 5,\r\n            active: 200\r\n          },\r\n          {\r\n            date: '周二',\r\n            new: 10,\r\n            active: 500\r\n          },\r\n          {\r\n            date: '周三',\r\n            new: 12,\r\n            active: 550\r\n          },\r\n          {\r\n            date: '周四',\r\n            new: 60,\r\n            active: 800\r\n          },\r\n          {\r\n            date: '周五',\r\n            new: 65,\r\n            active: 550\r\n          },\r\n          {\r\n            date: '周六',\r\n            new: 53,\r\n            active: 770\r\n          },\r\n          {\r\n            date: '周日',\r\n            new: 33,\r\n            active: 170\r\n          },\r\n        ],\r\n        //折线图\r\n        orderData: {\r\n          date: ['20231001','20231002','20231003','20231004','20231005','20231006','20231007',],\r\n          data: List\r\n        },\r\n        tableData: [\r\n          {\r\n            name: 'oppo',\r\n            todayBuy: 500,\r\n            monthBuy: 3500,\r\n            totalBuy: 22000\r\n          },\r\n          {\r\n            name: 'vivo',\r\n            todayBuy: 300,\r\n            monthBuy: 2200,\r\n            totalBuy: 24000\r\n          },\r\n          {\r\n            name: '苹果',\r\n            todayBuy: 800,\r\n            monthBuy: 4500,\r\n            totalBuy: 65000\r\n          },\r\n          {\r\n            name: '小米',\r\n            todayBuy: 1200,\r\n            monthBuy: 6500,\r\n            totalBuy: 45000\r\n          },\r\n          {\r\n            name: '三星',\r\n            todayBuy: 300,\r\n            monthBuy: 2000,\r\n            totalBuy: 34000\r\n          },\r\n          {\r\n            name: '魅族',\r\n            todayBuy: 350,\r\n            monthBuy: 3000,\r\n            totalBuy: 22000\r\n          },\r\n          // {\r\n          //   name: '华为',\r\n          //   todayBuy: 1000,\r\n          //   monthBuy: 6000,\r\n          //   totalBuy: 40000\r\n          // },\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}